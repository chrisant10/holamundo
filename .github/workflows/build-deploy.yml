name: Build and Deploy Infrastructure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: holamundo-repo
  ECS_CLUSTER: holamundo-cluster
  ECS_SERVICE: holamundo-service
  TF_BACKEND_BUCKET: tf-state-bucket-holamundo
  TF_STATE_KEY: state/holamundo.tfstate
  TF_LOCK_TABLE: tf-lock-table

jobs:
  verify-ecr-exists:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify ECR repository exists
      run: |
        if aws ecr describe-repositories --repository-names $ECR_REPOSITORY; then
          echo "ECR repository exists"
        else
          echo "ECR repository will be created by Terraform"
        fi

  build-and-push:
    needs: verify-ecr-exists
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn clean package

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
  
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  provision-infrastructure:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform-version: '1.5.0'

    - name: Prepare Terraform State
      working-directory: ./terraform
      run: |
        # Limpiar recursos problemÃ¡ticos si existen
        for resource in aws_subnet.public aws_security_group.alb aws_vpc.main; do
          terraform state list | grep -q "$resource" && terraform state rm "$resource" || true
        done
        terraform init -upgrade

    - name: Terraform Init (full)
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=$TF_BACKEND_BUCKET" \
          -backend-config="key=$TF_STATE_KEY" \
          -backend-config="region=$AWS_REGION" \
          -backend-config="dynamodb_table=$TF_LOCK_TABLE"

    - name: Terraform Format
      working-directory: ./terraform
      run: terraform fmt -check

    - name: Terraform Validate
      working-directory: ./terraform
      run: | 
        terraform init -backend=false 
        terraform validate

    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        # Extraer solo el tag de la URI completa de la imagen
        IMAGE_URI="${{ needs.build-and-push.outputs.image_uri }}"
        IMAGE_TAG="${IMAGE_URI##*:}"

        terraform plan \
          -var="image_tag=${IMAGE_TAG}" \
          -out=tfplan

    - name: Terraform Apply
      working-directory: ./terraform
      run: |
        terraform apply -auto-approve tfplan || \
        (echo "##[warning]First apply attempt failed, retrying..."; \
         terraform apply -auto-approve -refresh=false)

    - name: Get ALB DNS name
      working-directory: ./terraform
      id: alb-dns
      run: |
        ALB_DNS=$(terraform output -raw alb_dns_name)
        echo "alb_dns_name=$ALB_DNS" >> $GITHUB_OUTPUT
        echo "Application URL: http://$ALB_DNS"

    - name: Verify deployment
      run: |
        ALB_DNS=${{ steps.alb-dns.outputs.alb_dns_name }}
        echo "Testing application endpoint: http://$ALB_DNS"
        curl -s http://$ALB_DNS | grep "Hola Mundo" || exit 1
